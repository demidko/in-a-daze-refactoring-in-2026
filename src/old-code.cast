{"version":2,"width":80,"height":24,"timestamp":0,"env":{"TERM":"xterm-256color","SHELL":"/bin/bash"}}
[0.000,"o","manul@localhost:~$ date\r\n"]
[0.300,"o","Sun Mar 30 14:05:22 UTC 2025\r\n"]
[0.800,"o","manul@localhost:~$ git clone git@gitlab.farpost.net:FarPost/pdf-uploader.git\r\n"]
[1.300,"o","Cloning into 'pdf-uploader'...\r\nremote: Enumerating objects: 154, done.\r\nremote: Counting objects: 100% (154/154), done.\r\nremote: Compressing objects: 100% (118/118), done.\r\nremote: Total 154 (delta 32), reused 154 (delta 32), pack-reused 0\r\nReceiving objects: 100% (154/154), 56.37 KiB | 2.10 MiB/s, done.\r\nResolving deltas: 100% (32/32), done.\r\n"]
[4.800,"o","manul@localhost:~$ cd pdf-uploader\r\n"]
[5.300,"o","manul@localhost:~/pdf-uploader$ tree -I 'target|.git' -F\r\n"]
[5.800,"o",".\r\n├── Dockerfile\r\n├── kubernetes/\r\n│   ├── development/\r\n│   └── production/\r\n│       ├── deployment.yaml\r\n│       └── kustomization.yaml\r\n├── maven-settings.xml\r\n├── pom.xml\r\n├── README.md\r\n├── src/\r\n│   ├── main/\r\n│   │   ├── java/\r\n│   │   │   └── com/\r\n│   │   │       └── farpost/\r\n│   │   │           └── pdfuploader/\r\n│   │   │               ├── controller/\r\n│   │   │               │   ├── App.java\r\n│   │   │               │   └── ProtocolController.java\r\n│   │   │               ├── render/\r\n│   │   │               │   ├── ConvertCmd.java\r\n│   │   │               │   ├── ImageMagicRenderer.java\r\n│   │   │               │   └── Uploader.java\r\n│   │   │               └── Utils.java\r\n│   │   └── resources/...\r\n│   └── test/...\r\n└──\r\n"]
[10.800,"o","manul@localhost:~/pdf-uploader$ less src/main/java/com/farpost/pdfuploader/controller/render/ImageMagicRenderer.java\r\n"]
[11.300,"o","package com.farpost.pdfuploader.controller.render;\r\n"]
[11.700,"o","import lombok.extern.slf4j.Slf4j;\r\n"]
[12.100,"o","import java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.List;\r\n"]
[12.500,"o","import static org.apache.commons.io.FileUtils.deleteDirectory;\r\n"]
[12.900,"o","@Slf4j\r\npublic class ImageMagicRenderer {\r\n"]
[13.300,"o","    public static int PAGE_LIMIT = 5;\r\n"]
[13.700,"o","    public static List<byte[]> render(byte[] pdf) throws IOException {\r\n"]
[14.100,"o","        Path directory = null;\r\n        try {\r\n            directory = Files.createTempDirectory(\"pdf_renderer\");\r\n            Path inputPath = Paths.get(directory.toString(), \"input.pdf\");\r\n            Files.write(inputPath, pdf);\r\n            ConvertCmd cmd = new ConvertCmd(inputPath.toString(), directory.toString(), PAGE_LIMIT);\r\n            return cmd.run();\r\n        } finally {\r\n            if (directory != null) {\r\n                try {\r\n                    deleteDirectory(directory.toFile());\r\n                } catch (RuntimeException e) {\r\n                    log.error(\"Failed to remove temp dir {}\", directory, e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n:\r\n"]
[21.000,"o","manul@localhost:~/pdf-uploader$ q\r\n"]
[21.300,"o","manul@localhost:~/pdf-uploader$ less src/main/java/com/farpost/pdfuploader/controller/render/ConvertCmd.java\r\n"]
[21.800,"o","package com.farpost.pdfuploader.controller.render;\r\n"]
[22.200,"o","import lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.io.IOUtils;\r\n"]
[22.600,"o","import java.io.IOException;\r\nimport java.io.UncheckedIOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.List;\r\nimport java.util.stream.Stream;\r\n"]
[23.000,"o","import static com.google.common.collect.Lists.newArrayList;\r\nimport static java.lang.String.format;\r\nimport static java.lang.Thread.currentThread;\r\nimport static java.util.Collections.emptyList;\r\nimport static java.util.stream.Collectors.joining;\r\nimport static java.util.stream.Collectors.toList;\r\n"]
[23.400,"o","@Slf4j\r\npublic class ConvertCmd {\r\n"]
[23.800,"o","  private static boolean useOomSafe = false;\r\n"]
[24.200,"o","  static {\r\n    try {\r\n      Process process = Runtime.getRuntime().exec(\"which oomsafe\");\r\n      useOomSafe = process.waitFor() == 0;\r\n    } catch (InterruptedException e) {\r\n      log.error(\"Interrupted while probing oomsave\", e);\r\n      currentThread().interrupt();\r\n    } catch (IOException e) {\r\n      log.warn(\"Failed to detect oomsafe util\", e);\r\n    }\r\n  }\r\n"]
[24.600,"o","  private final String in;\r\n  private final String outDir;\r\n  private final int limit;\r\n"]
[25.000,"o","  public ConvertCmd(String in, String outDir, int limit) {\r\n    this.in = in;\r\n    this.outDir = outDir;\r\n    this.limit = limit;\r\n  }\r\n"]
[25.400,"o","  public List<byte[]> run() throws IOException {\r\n    try {\r\n      List<String> cmd = newArrayList();\r\n      if (useOomSafe) {\r\n        cmd.add(\"oomsafe\");\r\n      }\r\n      cmd.add(\"convert\");\r\n      cmd.add(\"-density\");\r\n      cmd.add(\"100\");\r\n      cmd.add(\"-background\");\r\n      cmd.add(\"white\");\r\n      cmd.add(\"-alpha\");\r\n      cmd.add(\"remove\");\r\n      cmd.add(\"-resize\");\r\n      cmd.add(\"2000x2000>\");\r\n      cmd.add(format(\"%s[0-%d]\", in, limit));\r\n      cmd.add(outDir + \"/out.jpeg\");\r\n      ProcessBuilder builder = new ProcessBuilder(cmd);\r\n      Process proc = builder.start();\r\n      int ret = proc.waitFor();\r\n      if (ret == 0) {\r\n        try (Stream<Path> list = Files.list(Paths.get(outDir))) {\r\n          return list.filter(f -> f.getFileName().toString().startsWith(\"out\") && f.getFileName().toString().endsWith(\".jpeg\"))\r\n                     .sorted()\r\n                     .map(ConvertCmd::readBytes)\r\n                     .collect(toList());\r\n        }\r\n      } else {\r\n        String error = IOUtils.toString(proc.getErrorStream());\r\n        String output = IOUtils.toString(proc.getInputStream());\r\n        var command = cmd.stream().collect(joining(\" \"));\r\n        log.error(\"Command [{}] failed with status {}, error [{}], output [{}]\", command, ret, error, output);\r\n      }\r\n    } catch (InterruptedException e) {\r\n      currentThread().interrupt();\r\n    }\r\n    return emptyList();\r\n  }\r\n"]
[26.200,"o","  private static byte[] readBytes(Path path) {\r\n    try {\r\n      return Files.readAllBytes(path);\r\n    } catch (IOException e) {\r\n      throw new UncheckedIOException(e);\r\n    }\r\n  }\r\n}\r\n"]
